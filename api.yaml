---
openapi: 3.0.0
info:
  title: API do app pixel
  description: API do app pixel
  contact:
    email: lucas.engen.cc@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/lucas832/pixel_api/1.0.0
  - url: localhost:3001
    description: Instância local do pixel server
tags:
  - name: comuns
    description: Rotas que não exigem token
  - name: trancadas
    description: Rotas que exigem o token de login
paths:
  /health:
    get:
      tags:
        - comuns
      summary: obtém status do servidor
      description: |
        Essa rota permite verificar se o servidor está em execução
      operationId: searchInventory
      responses:
        "200":
          description: O servidor está online
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthData"
        "400":
          description: bad input parameter
  /login:
    post:
      tags:
        - comuns
      summary: efetua o login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"

      responses:
        "200":
          description: usuário fez login
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LoginResult"

  /pixel/new:
    post:
      tags:
        - trancadas
      summary: cria um novo pixel
      parameters:
        - in: header
          name: X-Access-Token
          description: token de usuário obtido após fazer login
          schema:
            type: string
          required: true

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CreatePixelRequest"

      responses:
        "200":
          description: o pixel foi criado

  /features:
    get:
      tags:
        - comuns
      summary: obtém a lista de todos as características dos pixels
      description: Retorna a lista de características possíveis de editar em um pixel

      responses:
        "200":
          description: a lista de características foi obtida com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedPixelBody"
        "500":
          description: erro interno do servidor. verifique se o banco de dados está funcionando
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"

  /pixel/by-user:
    get:
      tags:
        - comuns
      summary: retorna os pixels de um usuário
      parameters:
        - in: query
          name: mail
          schema:
            type: string
          required: true

      responses:
        "200":
          description: O usuário possui um pixel associado a ele
        "400":
          description: a requisição está inválida (nenhum parâmetro de busca foi passado)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GenericError"
        "404":
          description: usuário não foi encontrado/usuário não possui nenhum pixel
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GenericError"

  /pixel/{pixelId}/feed:
    post:
      tags:
        - comuns
      summary: alimenta um pixel pelo id
      description: Pesquisa por um pixel com um determinado id e alimenta-o
      parameters:
        - name: "pixelId"
          in: "path"
          description: "id do pixel a ser alimentado"
          required: true
          content:
            application/json:
              schema:
                type: integer

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeedPixelBody"

      responses:
        "200":
          description: o pixel foi alimentado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedPixelBody"

        "404":
          description: o pixel não foi encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"

  /register:
    post:
      tags:
        - comuns
      summary: cria um usuário
      description: Cria um novo usuário no sisema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"

      responses:
        "200":
          description: "usuário criado com sucesso"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterUserResponse"

        "500":
          description: "falha ao criar usuário (usuário já existe ou banco pode estar fora do ar)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"

  /pixel/{pixelId}/features:
    get:
      tags:
        - comuns
      summary: obtém as características de um pixel
      parameters:
        - in: path
          name: pixelId
          schema:
            type: integer
          description: ID do pixel
          required: true

      responses:
        "200":
          description: as características foram obtidas com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedPixelBody"

        "404":
          description: o pixel não existe
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"

  /pixel/{pixelId}/feature/{featId}/enable:
    post:
      tags:
        - comuns
      summary: habilita/desabilita uma característica do pixel
      parameters:
        - in: path
          name: pixelId
          description: ID do pixel
          schema:
            type: integer
          required: true
        - in: path
          name: featId
          description: ID da característica
          schema:
            type: integer
          required: true

      responses:
        "200":
          description: as características foram atualizadas com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeaturesList"
        "404":
          description: pixel ou característica não foi encontrada
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"

  /team/new:
    post:
      tags:
        - comuns
      summary: cria um novo time

      responses:
        "200":
          description: o time foi criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamCreated"

  /team/{teamId}/pixel:
    get:
      tags:
        - comuns
      summary: obtém o pixel de um time
      parameters:
        - in: path
          name: teamId
          description: ID do time
          schema:
            type: integer
          required: true

      responses:
        "204":
          description: o time não possui pixel associado
        "200":
          description: o pixel foi obtido com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PixelModel"

  /team/{teamId}/pixel/{pixelId}/associate:
    post:
      tags:
        - comuns
      summary: associa um pixel a um time
      parameters:
        - in: path
          name: teamId
          description: ID do time de destino do pixel
          schema:
            type: integer
          required: true
        - in: path
          name: pixelId
          description: ID do pixel a ser associado
          schema:
            type: integer
          required: true

      responses:
        "200":
          description: o pixel foi associado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PixelModel"
        "404":
          description: pixel ou time não foram localizados
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "400":
          description: o time já possui um pixel associado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"

  /teams:
    get:
      tags:
        - comuns
      summary: obtém a lista de times disponíveis

      responses:
        "200":
          description: "a lista de times  foi obtida com sucesso"

components:
  schemas:
    PixelModel:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: "pixel 15"
        eye:
          type: string
        color:
          type: string
          example: "#00ff00"
        createdAt:
          type: string
          example: "2022-02-16T01:36:00.678Z"
        updatedAt:
          type: string
          example: "2022-02-17T01:36:00.678Z"
        team_id:
          type: integer
        user_id:
          type: integer
    FeaturesList:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        value:
          type: integer
        active:
          type: boolean
        feeding_date:
          type: string
    TeamCreated:
      type: object
      properties:
        id:
          type: integer
          description: ID do time criado
        createdAt:
          type: string
          description: data de criação
        updatedAt:
          type: string
          description: data de atualização

    RegisterUserResponse:
      type: object
      properties:
        id:
          type: integer
          description: ID do usuário criado
          example: 1
        registration:
          type: string
          description: matrícula do usuário criado
          example: test@email.org

    GenericError:
      type: object
      properties:
        error:
          type: string
          description: mensagem de erro
          example: "mensagem de erro qualquer"

    HealthData:
      type: object
      properties:
        message:
          type: string
          description: mensagem contendo o PID do servidor
          example: server running with pid 10

    LoginRequest:
      required:
        - registration
        - password
      type: object
      properties:
        registration:
          type: string
          description: matrícula do usuário
          example: email@test.com
        password:
          type: string
          description: senha do usuário
          example: test1234@

    LoginResult:
      required:
        - registration
        - id
      type: object
      properties:
        id:
          type: integer
          description: id do usuário criado
        registration:
          type: string
          description: matrícula do usuário criado

    CreatePixelRequest:
      required:
        - name
        - eye
        - color
      type: object
      properties:
        name:
          type: string
          example: pixel 1
        eye:
          type: string
          example: olho 1
        color:
          type: string
          example: "#ff0011"

    FeedPixelBody:
      required:
        - visibility
        - match
        - control
        - consistence
        - recognition
        - efficiency
        - minimalism
        - error_prevention
      properties:
        visibility:
          type: integer
          description: visibilidade
          example: 0
        match:
          type: integer
          description: correspondência
          example: 10
        control:
          type: integer
          description: controle
          example: 1
        consistence:
          type: integer
          description: consistência
          example: 2
        recognition:
          type: integer
          description: reconhecimento
          example: 3
        efficiency:
          type: integer
          description: eficiência
          example: 0
        minimalism:
          type: integer
          description: minimalismo
          example: 0
        error_prevention:
          type: integer
          description: prevenção de erros
          example: 0
